{"meta":{"title":"lzw","subtitle":"lzwの博客","description":"大专 | 软件技术 ","author":"lzw","url":"http://example.com","root":"/"},"pages":[{"title":"","date":"2022-04-19T01:01:29.871Z","updated":"2022-01-24T18:27:03.163Z","comments":true,"path":"baidu_verify_xxxxxxx.html","permalink":"http://example.com/baidu_verify_xxxxxxx.html","excerpt":"","text":"wvlc3L96QK"},{"title":"404","date":"2019-08-10T08:41:10.000Z","updated":"2022-06-06T11:25:29.575Z","comments":true,"path":"404.html","permalink":"http://example.com/404.html","excerpt":"","text":""},{"title":"放松一下","date":"2019-08-10T08:41:10.000Z","updated":"2022-06-06T11:25:29.618Z","comments":true,"path":"List/index.html","permalink":"http://example.com/List/index.html","excerpt":"","text":"影音资源共享"},{"title":"archives","date":"2019-10-24T16:00:00.000Z","updated":"2022-06-06T11:25:29.579Z","comments":true,"path":"archives/index.html","permalink":"http://example.com/archives/index.html","excerpt":"","text":""},{"title":"about","date":"2019-10-24T16:00:00.000Z","updated":"2022-06-06T11:25:29.577Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""},{"title":"统计","date":"2020-10-31T02:11:28.000Z","updated":"2022-06-06T11:25:29.582Z","comments":true,"path":"census/index.html","permalink":"http://example.com/census/index.html","excerpt":"","text":""},{"title":"友链","date":"2019-07-19T08:42:10.000Z","updated":"2022-06-06T11:25:29.585Z","comments":true,"path":"friends/index.html","permalink":"http://example.com/friends/index.html","excerpt":"","text":""},{"title":"资源分享","date":"2019-07-19T08:40:27.000Z","updated":"2022-06-06T11:25:29.626Z","comments":true,"path":"resource/index.html","permalink":"http://example.com/resource/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-10-24T16:00:00.000Z","updated":"2022-06-06T11:25:29.580Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"留言板","date":"2022-02-22T16:00:00.000Z","updated":"2022-06-06T11:25:29.584Z","comments":true,"path":"contact/index.html","permalink":"http://example.com/contact/index.html","excerpt":"","text":"畅所欲言 在这里可以留下你的足迹，欢迎在下方留言，欢迎交换友链，一起交流学习！"},{"title":"tags","date":"2019-07-19T08:40:27.000Z","updated":"2022-06-06T11:25:29.628Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"相册","date":"2022-06-06T11:25:29.590Z","updated":"2022-06-06T11:25:29.589Z","comments":true,"path":"List/galleries/index.html","permalink":"http://example.com/List/galleries/index.html","excerpt":"","text":""},{"title":"听听音乐","date":"2019-07-19T08:40:27.000Z","updated":"2022-06-06T11:25:29.621Z","comments":true,"path":"List/music/index.html","permalink":"http://example.com/List/music/index.html","excerpt":"","text":""},{"title":"听听音乐","date":"2019-07-19T08:40:27.000Z","updated":"2022-06-06T11:25:29.624Z","comments":true,"path":"List/tools/index.html","permalink":"http://example.com/List/tools/index.html","excerpt":"","text":""},{"title":"乖巧小狗","date":"2022-06-06T11:25:29.591Z","updated":"2022-06-06T11:25:29.591Z","comments":true,"path":"List/galleries/乖巧小狗/index.html","permalink":"http://example.com/List/galleries/%E4%B9%96%E5%B7%A7%E5%B0%8F%E7%8B%97/index.html","excerpt":"","text":""},{"title":"二次元风","date":"2022-06-06T11:25:29.594Z","updated":"2022-06-06T11:25:29.593Z","comments":true,"path":"List/galleries/二次元风/index.html","permalink":"http://example.com/List/galleries/%E4%BA%8C%E6%AC%A1%E5%85%83%E9%A3%8E/index.html","excerpt":"","text":""},{"title":"动漫人物","date":"2022-06-06T11:25:29.596Z","updated":"2022-06-06T11:25:29.595Z","comments":true,"path":"List/galleries/动漫人物/index.html","permalink":"http://example.com/List/galleries/%E5%8A%A8%E6%BC%AB%E4%BA%BA%E7%89%A9/index.html","excerpt":"","text":""},{"title":"动漫插画","date":"2022-06-06T11:25:29.597Z","updated":"2022-06-06T11:25:29.597Z","comments":true,"path":"List/galleries/动漫插画/index.html","permalink":"http://example.com/List/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/index.html","excerpt":"","text":""},{"title":"城市风光","date":"2022-06-06T11:25:29.605Z","updated":"2022-06-06T11:25:29.605Z","comments":true,"path":"List/galleries/城市风光/index.html","permalink":"http://example.com/List/galleries/%E5%9F%8E%E5%B8%82%E9%A3%8E%E5%85%89/index.html","excerpt":"","text":""},{"title":"清新花卉","date":"2022-06-06T11:25:29.609Z","updated":"2022-06-06T11:25:29.608Z","comments":true,"path":"List/galleries/清新花卉/index.html","permalink":"http://example.com/List/galleries/%E6%B8%85%E6%96%B0%E8%8A%B1%E5%8D%89/index.html","excerpt":"","text":""},{"title":"炫酷跑车","date":"2022-06-06T11:25:29.612Z","updated":"2022-06-06T11:25:29.611Z","comments":true,"path":"List/galleries/炫酷跑车/index.html","permalink":"http://example.com/List/galleries/%E7%82%AB%E9%85%B7%E8%B7%91%E8%BD%A6/index.html","excerpt":"","text":""},{"title":"璀璨星空","date":"2022-06-06T11:25:29.614Z","updated":"2022-06-06T11:25:29.613Z","comments":true,"path":"List/galleries/璀璨星空/index.html","permalink":"http://example.com/List/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/index.html","excerpt":"","text":""},{"title":"自然风景","date":"2022-06-06T11:25:29.617Z","updated":"2022-06-06T11:25:29.617Z","comments":true,"path":"List/galleries/自然风景/index.html","permalink":"http://example.com/List/galleries/%E8%87%AA%E7%84%B6%E9%A3%8E%E6%99%AF/index.html","excerpt":"","text":""},{"title":"动漫风景","date":"2022-06-06T11:25:29.601Z","updated":"2022-06-06T11:25:29.600Z","comments":true,"path":"List/galleries/动漫风景/index.html","permalink":"http://example.com/List/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/index.html","excerpt":"","text":""},{"title":"视频","date":"2019-08-10T08:41:10.000Z","updated":"2022-06-06T11:25:29.620Z","comments":true,"path":"List/movies/index.html","permalink":"http://example.com/List/movies/index.html","excerpt":"","text":""},{"title":"甜美食品","date":"2022-06-06T11:25:29.616Z","updated":"2022-06-06T11:25:29.615Z","comments":true,"path":"List/galleries/甜美食品/index.html","permalink":"http://example.com/List/galleries/%E7%94%9C%E7%BE%8E%E9%A3%9F%E5%93%81/index.html","excerpt":"","text":""},{"title":"呆萌猫咪","date":"2022-06-06T11:25:29.604Z","updated":"2022-06-06T11:25:29.603Z","comments":true,"path":"List/galleries/呆萌猫咪/index.html","permalink":"http://example.com/List/galleries/%E5%91%86%E8%90%8C%E7%8C%AB%E5%92%AA/index.html","excerpt":"","text":""},{"title":"","date":"2022-04-19T01:01:29.885Z","updated":"2022-01-24T18:27:03.164Z","comments":true,"path":"google1xxxxxxx0.html","permalink":"http://example.com/google1xxxxxxx0.html","excerpt":"","text":"google-site-verification: google110e5e5e14c8dcf0.html"}],"posts":[{"title":"流程图","slug":"流程图","date":"2022-06-11T09:32:00.000Z","updated":"2022-06-11T11:06:14.083Z","comments":true,"path":"posts/7f59c40c.html","link":"","permalink":"http://example.com/posts/7f59c40c.html","excerpt":"","text":"流程图基本元素 流程图三种基本结构 顺序结构： 选择结构： 循环结构： 详情可见https://www.jianshu.com/p/cb8c25fd6f4c","categories":[{"name":"工作常用","slug":"工作常用","permalink":"http://example.com/categories/%E5%B7%A5%E4%BD%9C%E5%B8%B8%E7%94%A8/"}],"tags":[{"name":"流程图","slug":"流程图","permalink":"http://example.com/tags/%E6%B5%81%E7%A8%8B%E5%9B%BE/"}],"author":"lzw"},{"title":"维修单字典维护","slug":"维修单字典维护","date":"2022-05-28T14:01:00.000Z","updated":"2022-06-11T11:10:12.638Z","comments":true,"path":"posts/884e5e.html","link":"","permalink":"http://example.com/posts/884e5e.html","excerpt":"","text":"INSERT INTO t_factory_repair_dictionary`(`failure_type`, `component_type`, `dict_type`, `dASONict_value`) VALUES ('器件损坏', '电容', 'COMPONENT', '开裂'), ('软件问题', '电容', 'COMPONENT', '短路'), ('工艺人为', '电容', 'COMPONENT', '漏电'), ('结构问题', '电容', 'COMPONENT', '开裂'), ('售后问题', '电容', 'COMPONENT', '绝缘阻抗下降'), ('器件损坏', '电容', 'COMPONENT', '虚焊'), ('器件损坏', '电容', 'COMPONENT', '烧坏'), ('器件损坏', '电容', 'COMPONENT', '失调'), ('器件损坏', '电容', 'COMPONENT', '鼓胀/爆裂'), ('器件损坏', '电容', 'COMPONENT', '内部裂纹'), ('器件损坏', '电容', 'COMPONENT', '进液腐蚀'), ('器件损坏', '电阻', 'COMPONENT', '开路'), ('器件损坏', '电阻', 'COMPONENT', '短路'), ('器件损坏', '电阻', 'COMPONENT', '阻值变大'), ('器件损坏', '电阻', 'COMPONENT', '阻值变小'), ('器件损坏', '电阻', 'COMPONENT', '烧坏'), ('器件损坏', '电阻', 'COMPONENT', '脱落'), ('器件损坏', '电阻', 'COMPONENT', '虚焊'), ('器件损坏', '电阻', 'COMPONENT', '连焊'), ('器件损坏', '电阻', 'COMPONENT', '失调'), ('器件损坏', '电阻', 'COMPONENT', '进液腐蚀'), ('器件损坏', '电感', 'COMPONENT', '开路'), ('器件损坏', '电感', 'COMPONENT', '短路'), ('器件损坏', '电感', 'COMPONENT', '脱落'), ('器件损坏', '电感', 'COMPONENT', '开裂'), ('器件损坏', '电感', 'COMPONENT', '虚焊'), ('器件损坏', '电感', 'COMPONENT', '连焊'), ('器件损坏', '电感', 'COMPONENT', '破损'), ('器件损坏', '电感', 'COMPONENT', '进液腐蚀'), ('器件损坏', '极光', 'COMPONENT', '开路'), ('器件损坏', '极光', 'COMPONENT', '短路'), ('器件损坏', '极光', 'COMPONENT', '脱落'), ('器件损坏', '极光', 'COMPONENT', '虚焊'), ('器件损坏', '极光', 'COMPONENT', '连焊'), ('器件损坏', '极光', 'COMPONENT', '漏电'), ('器件损坏', '极光', 'COMPONENT', '发光偏暗'), ('器件损坏', '极光', 'COMPONENT', '进液腐蚀'), ('器件损坏', 'PCB', 'COMPONENT', '走线开路'), ('器件损坏', 'PCB', 'COMPONENT', '走线短路'), ('器件损坏', 'PCB', 'COMPONENT', '断裂'), ('器件损坏', 'PCB', 'COMPONENT', '绝缘阻抗下降'), ('器件损坏', 'PCB', 'COMPONENT', '分层'), ('器件损坏', 'PCB', 'COMPONENT', '变形'), ('器件损坏', 'PCB', 'COMPONENT', '进液腐蚀'), ('器件损坏', 'PCB', 'COMPONENT', '贴偏、未装到位'), ('器件损坏', 'IC', 'COMPONENT', '引脚开路'), ('器件损坏', 'IC', 'COMPONENT', '引脚短路'), ('器件损坏', 'IC', 'COMPONENT', '虚焊'), ('器件损坏', 'IC', 'COMPONENT', '连焊'), ('器件损坏', 'IC', 'COMPONENT', '漏电'), ('器件损坏', 'IC', 'COMPONENT', '焊点开裂'), ('器件损坏', 'IC', 'COMPONENT', 'I/V曲线异常'), ('器件损坏', 'IC', 'COMPONENT', '坏'), ('器件损坏', 'IC', 'COMPONENT', '进液腐蚀'), ('器件损坏', '振荡器', 'COMPONENT', '开路'), ('器件损坏', '振荡器', 'COMPONENT', '短路'), ('器件损坏', '振荡器', 'COMPONENT', '脱落'), ('器件损坏', '振荡器', 'COMPONENT', '虚焊'), ('器件损坏', '振荡器', 'COMPONENT', '连焊'), ('器件损坏', '振荡器', 'COMPONENT', '不起振'), ('器件损坏', '振荡器', 'COMPONENT', '频率偏移'), ('器件损坏', '振荡器', 'COMPONENT', '进液腐蚀'), ('器件损坏', '电声器件', 'COMPONENT', '开路'), ('器件损坏', '电声器件', 'COMPONENT', '短路'), ('器件损坏', '电声器件', 'COMPONENT', '杂音断续'), ('器件损坏', '电声器件', 'COMPONENT', '放音无音'), ('器件损坏', '电声器件', 'COMPONENT', '不录音'), ('器件损坏', '电声器件', 'COMPONENT', '录音音小'), ('器件损坏', '电声器件', 'COMPONENT', '单边无音'), ('器件损坏', '电声器件', 'COMPONENT', '进液腐蚀'), ('器件损坏', '接插件', 'COMPONENT', '变形'), ('器件损坏', '接插件', 'COMPONENT', '未扣到位'), ('器件损坏', '接插件', 'COMPONENT', '弹片异物、脏污'), ('器件损坏', '接插件', 'COMPONENT', '弹片变形'), ('器件损坏', '接插件', 'COMPONENT', '弹片脱落'), ('器件损坏', '接插件', 'COMPONENT', '虚焊'), ('器件损坏', '接插件', 'COMPONENT', '连焊'), ('器件损坏', '接插件', 'COMPONENT', '插口崩裂'), ('器件损坏', '接插件', 'COMPONENT', '胶芯崩裂'), ('器件损坏', '接插件', 'COMPONENT', '溃PIN'), ('器件损坏', '接插件', 'COMPONENT', '弹片镀层磨损或氧化'), ('器件损坏', '接插件', 'COMPONENT', '内陷'), ('器件损坏', '接插件', 'COMPONENT', '弹针卡死'), ('器件损坏', '接插件', 'COMPONENT', '生锈'), ('器件损坏', '接插件', 'COMPONENT', '插拔力不符合要求'), ('器件损坏', '接插件', 'COMPONENT', '短路'), ('器件损坏', '接插件', 'COMPONENT', '寿命不符合要求'), ('器件损坏', '接插件', 'COMPONENT', '绝缘阻抗不符合要求'), ('器件损坏', '接插件', 'COMPONENT', '进液腐蚀'), ('器件损坏', '接插件', 'COMPONENT', '断裂'), ('器件损坏', '开关', 'COMPONENT', '短路'), ('器件损坏', '开关', 'COMPONENT', '无功能'), ('器件损坏', '开关', 'COMPONENT', '漏电'), ('器件损坏', '开关', 'COMPONENT', '功能时有时无'), ('器件损坏', '开关', 'COMPONENT', '脱落'), ('器件损坏', '开关', 'COMPONENT', '虚焊'), ('器件损坏', '开关', 'COMPONENT', '连焊'), ('器件损坏', '开关', 'COMPONENT', '手感不良'), ('器件损坏', '开关', 'COMPONENT', '按键力不符合要求'), ('器件损坏', '开关', 'COMPONENT', '进液腐蚀'), ('器件损坏', '显示屏', 'COMPONENT', '无显示'), ('器件损坏', '显示屏', 'COMPONENT', '白屏'), ('器件损坏', '显示屏', 'COMPONENT', '灰屏'), ('器件损坏', '显示屏', 'COMPONENT', '花屏'), ('器件损坏', '显示屏', 'COMPONENT', '无显示'), ('器件损坏', '显示屏', 'COMPONENT', '白屏'), ('器件损坏', '显示屏', 'COMPONENT', '灰屏'), ('器件损坏', '显示屏', 'COMPONENT', '花屏'), ('器件损坏', '显示屏', 'COMPONENT', '斑块'), ('器件损坏', '显示屏', 'COMPONENT', '亮点'), ('器件损坏', '显示屏', 'COMPONENT', '缺划'), ('器件损坏', '显示屏', 'COMPONENT', '显示不均匀'), ('器件损坏', '显示屏', 'COMPONENT', '显示色差'), ('器件损坏', '显示屏', 'COMPONENT', '屏闪'), ('器件损坏', '显示屏', 'COMPONENT', '有水纹'), ('器件损坏', '显示屏', 'COMPONENT', '显示错乱'), ('器件损坏', '显示屏', 'COMPONENT', '漏光'), ('器件损坏', '显示屏', 'COMPONENT', '背光不均'), ('器件损坏', '显示屏', 'COMPONENT', '破裂'), ('器件损坏', '显示屏', 'COMPONENT', '倒屏'), ('器件损坏', '显示屏', 'COMPONENT', '进液腐蚀'), ('器件损坏','触摸屏','COMPONENT','无功能'), ('器件损坏','触摸屏','COMPONENT','功能INT'), ('器件损坏','触摸屏','COMPONENT','不灵敏'), ('器件损坏','触摸屏','COMPONENT','点屏偏移'), ('器件损坏','触摸屏','COMPONENT','定位不准'), ('器件损坏','触摸屏','COMPONENT','画线扭曲'), ('器件损坏','触摸屏','COMPONENT','划伤'), ('器件损坏','触摸屏','COMPONENT','表面凹陷'), INSERT INTO `t_factory_repair_dictionary`(`failure_type`, `component_type`, `dict_type`, `dict_value`) VALUES ('器件损坏','电容','REASON','陶瓷电容'), ('器件损坏','电容','REASON','可调电容'), ('器件损坏','电容','REASON','电解电容'), ('器件损坏','电阻','REASON','电阻'), ('器件损坏','电阻','REASON','排阻'), ('器件损坏','电阻','REASON','电位器'), ('器件损坏','电阻','REASON','热敏电阻'), ('器件损坏','电阻','REASON','光敏电阻'), ('器件损坏','电阻','REASON','压敏电阻'), ('器件损坏','电感','REASON','电感'), ('器件损坏','电感','REASON','磁珠'), ('器件损坏','电感','REASON','线圈'), ('器件损坏','极管','REASON','二极管'), ('器件损坏','极管','REASON','三极管（MOS管）'), ('器件损坏','极管','REASON','稳压二极管'), ('器件损坏','极管','REASON','发光二极管'), ('器件损坏','极管','REASON','TVS管'), ('器件损坏','极管','REASON','ESD管'), ('器件损坏','IC','REASON','IC'), ('器件损坏','IC','REASON','MCU（CPU）'), ('器件损坏','IC','REASON','电源管理IC（PMU)'), ('器件损坏','IC','REASON','充电IC'), ('器件损坏','IC','REASON','音频功放IC'), ('器件损坏','IC','REASON','录音IC'), ('器件损坏','IC','REASON','DDR'), ('器件损坏','IC','REASON','EMMC（FLASH）'), ('器件损坏','IC','REASON','WIFI模块（IC）/GPS模块IC'), ('器件损坏','IC','REASON','蓝牙IC'), ('器件损坏','IC','REASON','主射频IC'), ('器件损坏','IC','REASON','背光IC/触屏驱动IC'), ('器件损坏','IC','REASON','马达驱动IC'), ('器件损坏','IC','REASON','开关IC'), ('器件损坏','IC','REASON','霍尔传感IC'), ('器件损坏','IC','REASON','重力传感IC'), ('器件损坏','IC','REASON','加速度传感IC'), ('器件损坏','IC','REASON','环境光传感IC'), ('器件损坏','IC','REASON','距离传感IC'), ('器件损坏','IC','REASON','陀螺仪'), ('器件损坏','IC','REASON','气压计'), ('器件损坏','IC','REASON','心率血氧传感IC'), ('器件损坏','振荡器','REASON','振荡器'), ('器件损坏','振荡器','REASON','晶振'), ('器件损坏','振荡器','REASON','马达'), ('器件损坏','电声器件','REASON','麦克风'), ('器件损坏','电声器件','REASON','扬声器'), ('器件损坏','电声器件','REASON','耳机'), ('器件损坏','接插件','REASON','USB插座'), ('器件损坏','接插件','REASON','BTB插座'), ('器件损坏','接插件','REASON','耳机插座'), ('器件损坏','接插件','REASON','SIM卡座'), ('器件损坏','接插件','REASON','弹片、pogo pin'), ('器件损坏','接插件','REASON','连接器'), ('器件损坏','接插件','REASON','TF卡座'), ('器件损坏','接插件','REASON','SD卡座'), ('器件损坏','接插件','REASON','触点'), ('器件损坏','塑胶件','REASON','面壳'), ('器件损坏','塑胶件','REASON','底壳'), ('器件损坏','塑胶件','REASON','中框'), ('器件损坏','塑胶件','REASON','外套皮套'), ('器件损坏','塑胶件','REASON','表带'), ('器件损坏','塑胶件','REASON','SIM卡盖'), ('器件损坏','塑胶件','REASON','按键支架'), ('器件损坏','塑胶件','REASON','螺钉柱'), ('器件损坏','塑胶件','REASON','塑胶按键'), ('器件损坏','塑胶件','REASON','装饰件'), ('器件损坏','结构件','REASON','转轴'), ('器件损坏','结构件','REASON','托板'), ('器件损坏','结构件','REASON','其他'), ('器件损坏','辅料','REASON','铭牌贴'), ('器件损坏','辅料','REASON','铜箔帖'), ('器件损坏','辅料','REASON','绝缘胶纸'), ('器件损坏','辅料','REASON','防尘网'), ('器件损坏','辅料','REASON','防水膜'), ('器件损坏','辅料','REASON','双面胶'), ('器件损坏','辅料','REASON','泡棉'), ('器件损坏','摄像头','REASON','前摄不良'), ('器件损坏','摄像头','REASON','后摄不良'), ('器件损坏','摄像头','REASON','升降不良'), ('器件损坏','其它','REASON','其他'), ('器件损坏','软件问题','REASON','软件问题')","categories":[{"name":"运维","slug":"运维","permalink":"http://example.com/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"数据维护","slug":"数据维护","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%B4%E6%8A%A4/"}],"author":"lzw"},{"title":"常用的东西","slug":"用的东西","date":"2022-05-18T13:25:00.000Z","updated":"2022-06-27T07:17:49.516Z","comments":true,"path":"posts/8a82d9b.html","link":"","permalink":"http://example.com/posts/8a82d9b.html","excerpt":"","text":"java java ----------------------------------------------------------------------- 转化大小写 IntelliJ IDEA提供了CamelCase很方便的工具插件，使用快捷键shift+alt+u。 按住shift+alt再不停的按U,会把选中内容的单词的下划线转驼峰转大写等，不停的转换，直到你想要的。 CamelCase插件： 1.安装方法： idea菜单栏-file-settings-搜索\"plugins\"-点击下面按钮‘browse repositories‘-搜索“CamelCase”-点击安装 2.使用方法 安装后重新打开idea,选中内容，快捷键shit+alt+u，选中内容中的单词 就会变，直到变成你想要的。 分支前缀 bugfix- feature- commit- 查异常 url.full : *material-transfer* and http.request.method : POST 本地swagger默认地址 http://localhost:8080/swagger-ui.html hive(使用sql查询需加%sql)查看hive建表语句：show create table tablename; 查看hive表结构：describe tablename; 简写：desc tablename; 删除hive表 drop table if exists bbksale_origin.t_children; 查看hive表字段 desc formatted 查看所有表 use bbksale_origin; show tables; 修改hive字段数据类型 Alter table 表名 change column 原字段名称 现字段名称 数据类型 新增字段 alter table 表名 add columns(字段名 数据类型) 比较两表差异SELECT trim(sn) as sn FROM bbksale_origin.t_imeiinfo_make_all_bak EXCEPT SELECT sn FROM bbksale_origin.t_imeiinfo_make_all sql海外机型总激活海外机型总激活------------------------------------------------------- SELECT product.title,agent.agentname,count(1) FROM bbksale_origin.psale_sale_imei_all psia INNER JOIN bbksale_origin.t_psys_agent_no agent ON psia.agent_id = TRIM(agent.agentid) and agent.sysdatabasename = 'OS' LEFT JOIN bbksale_origin.t_v_product product ON psia.SEGMENT1 = TRIM(product.PlantProductID) where nvl (psia.jhsaledate, 'null') != 'null' AND IF( psia.thdate = 'null', '2000-1-1',psia.thdate ) &lt; psia.fgdate group by product.title, agent.agentname 海外机型总激活(具体日期)海外机型总激活(具体日期)----------------------------------- SELECT psia.jhsaledate,product.title,agent.agentname,count(1) FROM bbksale_origin.psale_sale_imei_all psia INNER JOIN bbksale_origin.t_psys_agent_no agent ON psia.agent_id = TRIM(agent.agentid) and agent.sysdatabasename = 'OS' LEFT JOIN bbksale_origin.t_v_product product ON psia.SEGMENT1 = TRIM(product.PlantProductID) where nvl (psia.jhsaledate, 'null') != 'null' AND IF( psia.thdate = 'null', '2000-1-1',psia.thdate ) &lt; psia.fgdate and (psia.jhsaledate &gt;= '2022-06-23' and psia.jhsaledate &lt;= '2022-06-26') group by psia.jhsaledate, product.title, agent.agentname order by psia.jhsaledate 评价推送数据（经常使用）select service_name 代理, case send_type when 1 then '用户送修' when 2 then '经销商送修' when 4 then '寄修' else '' end 送修类型, count(*) 数量 from t_ticket where is_deleted = 0 and is_push_questionnaire = 1 and submit_time BETWEEN '2022-06-20 00:00:00' and '2022-06-26 23:59:59' group by service_name, send_type order by service_name, send_type 在线评价详情select t.service_name 代理, t.ticket_code 工单号, case t.send_type when 1 then '用户送修' when 2 then '经销商送修' when 4 then '寄修' else '' end 送修类型, case t.send_type when 1 then c.user_openid when 2 then shop.user_openid when 4 then express.user_openid else '' end 微信id, t.site_code 网点id, t.site_name 网点名称, t.shop_id 经销商id, t.shop_name 经销商名称, t.factory 厂别, t.solution 解决方法, e.update_time 评价时间, e.service_score 服务分数, e.environment_score 环境分数, e.suggestions 用户建议, e.evaluation_data -&gt; '$.questions[*].values' 评价内容, m.material_code 物料代码, m.material_name 物料名称, t.complete_time 完成时间 from t_ticket t left join t_user_evaluation e on t.ticket_code = e.ticket_code left join t_ticket_material m on t.ticket_code = m.ticket_code left join t_ticket_shop shop on t.ticket_code = shop.ticket_code left join t_ticket_call c on t.ticket_code = c.ticket_code left join t_ticket_express express on t.ticket_code = express.ticket_code where t.is_deleted = 0 and t.is_push_questionnaire = 1 and submit_time BETWEEN '2022-05-01 00:00:00' and '2022-05-31 23:59:59' order by t.service_name, t.send_type","categories":[{"name":"工作常用","slug":"工作常用","permalink":"http://example.com/categories/%E5%B7%A5%E4%BD%9C%E5%B8%B8%E7%94%A8/"}],"tags":[{"name":"命令、分支、地址","slug":"命令、分支、地址","permalink":"http://example.com/tags/%E5%91%BD%E4%BB%A4%E3%80%81%E5%88%86%E6%94%AF%E3%80%81%E5%9C%B0%E5%9D%80/"}],"author":"lzw"},{"title":"mysql建表语句转hive语句(py)","slug":"mysql建表语句转hive语句-py","date":"2022-05-18T12:22:00.000Z","updated":"2022-06-06T11:25:29.683Z","comments":true,"path":"posts/11524e14.html","link":"","permalink":"http://example.com/posts/11524e14.html","excerpt":"","text":"from re import fullmatch from pymysql import Connection # conda install -y pymysql 查询MySQL表的列名、列类型和列注释 SQL_COLUMNS = ''' SELECT `COLUMN_NAME` -- 列名 ,`COLUMN_TYPE` -- 类型 ,`COLUMN_COMMENT` -- 列注释 FROM `information_schema`.`COLUMNS` WHERE `TABLE_SCHEMA`='{TABLE_SCHEMA}' AND `TABLE_NAME`='{TABLE_NAME}' ORDER BY `ORDINAL_POSITION`; '''.strip().format 查询MySQL表的注释 SQL_COMMENT = ''' SELECT `TABLE_COMMENT` FROM `information_schema`.`TABLES` WHERE `TABLE_SCHEMA`='{TABLE_SCHEMA}' AND `TABLE_NAME`='{TABLE_NAME}'; '''.strip().format HIVE建表语句 HIVE_DDL = ''' CREATE EXTERNAL TABLE `{table}`( {columns} ) COMMENT '{table_comment}' PARTITIONED BY (`ymd` STRING COMMENT '年月日'); '''.strip().format MySQL原表的建表语句，用于参照 MYSQL_DDL = \"SHOW CREATE TABLE `{TABLE_SCHEMA}`.`{TABLE_NAME}`\".format def column_type_mysql2hive(mysql_column_type): \"\"\"MySQL列数据类型转成HIVE的\"\"\" # tinyint if fullmatch('^tinyint.+unsigned', mysql_column_type): return 'SMALLINT' elif fullmatch('^tinyint.*', mysql_column_type): return 'TINYINT' # smallint elif fullmatch('^smallint.+unsigned', mysql_column_type): return 'INT' elif fullmatch('^smallint.*', mysql_column_type): return 'SMALLINT' # mediumint elif fullmatch('^mediumint.*', mysql_column_type): return 'INT' # int elif fullmatch('^int.+unsigned', mysql_column_type): return 'BIGINT' elif fullmatch('^int.*', mysql_column_type): return 'INT' # bigint elif fullmatch('^bigint.+unsigned', mysql_column_type): # return 'STRING' return 'BIGINT' # 无符号BIGINT可能会越界 elif fullmatch('^bigint.*', mysql_column_type): return 'BIGINT' # double、float、decimal elif fullmatch('^double.*', mysql_column_type): return 'DOUBLE' elif fullmatch('^float.*', mysql_column_type): return 'FLOAT' elif fullmatch(r'^decimal.*', mysql_column_type): return mysql_column_type.replace(' unsigned', '').upper() # 其它 else: return 'STRING' class Mysql: def __init__(self, **kwargs): self.db = Connection( user=kwargs.pop('user', 'root'), password=kwargs.pop('password','gdmysql!'), host=kwargs.pop('host', '172.28.2.15'), database=kwargs.pop('database','service_center'), port=kwargs.pop('port', 3306), charset=kwargs.pop('charset', 'UTF8'), ) self.cursor = self.db.cursor() def __del__(self): self.cursor.close() self.db.close() def commit(self, sql): try: self.cursor.execute(sql) self.db.commit() except Exception as e: print(e) def fetchall(self, query): self.cursor.execute(query) return self.cursor.fetchall() # 有数据：tuple of tuple；无数据：() def get_columns(self, db, tb): columns = [] for c_name, c_type, c_comment in self.fetchall(SQL_COLUMNS(TABLE_SCHEMA=db, TABLE_NAME=tb)): hive_type = column_type_mysql2hive(c_type) columns.append(f\" `{c_name}` {hive_type} COMMENT '{c_comment}',\") return '\\n'.join(columns).rstrip(',') def get_table_comment(self, db, tb): return self.fetchall(SQL_COMMENT(TABLE_SCHEMA=db, TABLE_NAME=tb))[0][0] def get_hive_ddl(self, db, tb, prefix='ods_mysql_', postfix='_full'): columns = self.get_columns(db, tb) comment = self.get_table_comment(db, tb) table = prefix + tb + postfix return HIVE_DDL(table=table, columns=columns, table_comment=comment) def get_mysql_ddl(self, db, tb): return self.fetchall(MYSQL_DDL(TABLE_SCHEMA=db, TABLE_NAME=tb))[0][1] if __name__ == '__main__': TABLE_SCHEMA = 'service_center' TABLE_NAME = 't_factory_repair' m = Mysql(password='gdmysql!', database='service_center') print('源MySQL建表语句'.center(99, '-')) print(m.get_mysql_ddl(TABLE_SCHEMA, TABLE_NAME)) print('HIVE建表语句'.center(99, '-')) print(m.get_hive_ddl(TABLE_SCHEMA, TABLE_NAME))","categories":[{"name":"大数据","slug":"大数据","permalink":"http://example.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"}],"tags":[{"name":"python、hive","slug":"python、hive","permalink":"http://example.com/tags/python%E3%80%81hive/"}],"author":"lzw"},{"title":"mysql唯一索引遇见的bug","slug":"mysql唯一索引遇见的bug","date":"2022-04-29T10:01:00.000Z","updated":"2022-06-06T11:25:29.679Z","comments":true,"path":"posts/1df01bfc.html","link":"","permalink":"http://example.com/posts/1df01bfc.html","excerpt":"","text":"https://blog.csdn.net/gaifuxi9518/article/details/120010828?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165122516716781667883091%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=165122516716781667883091&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-120010828.142^v9^control,157^v4^control&amp;utm_term=java.sql.SQLIntegrityConstraintViolationException%3A+Duplicate+entry+AF99E02210600235+for+key+idx_ticket_code&amp;spm=1018.2226.3001.4187","categories":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"}],"author":"lzw"},{"title":"移动blog报错","slug":"移动blog报错","date":"2022-04-19T01:13:00.000Z","updated":"2022-06-06T11:25:29.702Z","comments":true,"path":"posts/6f7442ca.html","link":"","permalink":"http://example.com/posts/6f7442ca.html","excerpt":"","text":"完美解决 bash: hexo: command not found解决思路首先检查node和npm的版本信息 node -v npm -v 环境变量的配置问题 注意你的博客目录下应该有两个 node_modules 文件夹，例如我的是 E:\\BLOG\\www.itrhx.com\\node_modules\\.bin 和 E:\\BLOG\\www.itrhx.com\\Hexo\\node_modules\\.bin 要添加到 Path 里面的是与 _config.yml 在同一个目录的 node_modules 文件夹！ 环境变量添加好了之后重新打开 git 即可运行 hexo 命令，如果此时仍然无法执行 hexo 命令，那就只能拿出终极绝招了，运行命令 npm install hexo-cli -g 重新安装 hexo 即可！","categories":[],"tags":[{"name":"blog","slug":"blog","permalink":"http://example.com/tags/blog/"}],"author":"lzw"},{"title":"springboot集成mybatis","slug":"springboot集成mybatis","date":"2022-04-02T11:25:00.000Z","updated":"2022-06-11T07:53:44.413Z","comments":true,"path":"posts/1597783f.html","link":"","permalink":"http://example.com/posts/1597783f.html","excerpt":"","text":"springboot集成mybatis项目目录https://raw.githubusercontent.com/SiMengFeiMengLzw/drawing/master/img/image-20220402192629325.png 配置文件pom.xml文件&lt;!--mybatis依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.4.6&lt;/version&gt; &lt;/dependency&gt; &lt;!--mysql连接依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;8.0.18&lt;/version&gt; &lt;/dependency&gt; &lt;!--lombok依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;version&gt;1.18.12&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;!--alibaba连接池--&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.2.1&lt;/version&gt; &lt;/dependency&gt; &lt;!--mybatis与springboot的连接依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.1.1&lt;/version&gt; &lt;/dependency&gt; application.properties# 应用名称 spring.application.name=demo # 应用服务 WEB 访问端口 server.port=8888 #druid数据库连接池 type=com.alibaba.druid.pool.DruidDataSource #配置mapper mybatis.mapper-locations=classpath:mapper/*.xml application.ymlspring: datasource: url: jdbc:mysql://localhost:3306/百万索引?serverTimezone=GMT%2B8&amp;useSSL=true driver-class-name: com.mysql.cj.jdbc.Driver username: root password: lzw123654789 # 彩色日志开启 output: ansi: enabled: always # sql日志开启 logging: level: com.lzw.mybatis.demo.mapper: debug mapper.xml&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt; &lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt; &lt;mapper namespace=\"com.lzw.mybatis.demo.mapper.TestUserMapper\"&gt; &lt;select id=\"queryAll\" resultType=\"com.lzw.mybatis.demo.pojo.TestUser\"&gt; select * from test_user limit 1,1 &lt;/select&gt; &lt;/mapper&gt; TestUserMapperpackage com.lzw.mybatis.demo.mapper; import com.lzw.mybatis.demo.pojo.TestUser; import org.apache.ibatis.annotations.Mapper; import java.util.List; @Mapper public interface TestUserMapper { //查询所有数据 public List&lt;TestUser&gt; queryAll(); } TestUserpackage com.lzw.mybatis.demo.pojo; import lombok.Data; import java.sql.Date; @Data public class TestUser { private Long id; private String userId; private String userName; private String phone; private Long lanId; private Long regionId; private Date createTime; } 单元测试@SpringBootTest class DemoApplicationTests { @Test void contextLoads() { } @Autowired TestUserMapper testUserMapper; @Test public void toTest(){ List&lt;TestUser&gt; testUsers = testUserMapper.queryAll(); testUsers.forEach(e-&gt; System.out.println(e)); } } https://raw.githubusercontent.com/SiMengFeiMengLzw/drawing/master/img/image-20220402193142363.png","categories":[{"name":"项目","slug":"项目","permalink":"http://example.com/categories/%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"springboot集成mybatis","slug":"springboot集成mybatis","permalink":"http://example.com/tags/springboot%E9%9B%86%E6%88%90mybatis/"}],"author":"lzw"},{"title":"数据库常用命令","slug":"数据库常用命令","date":"2022-03-28T12:57:00.000Z","updated":"2022-06-06T11:25:29.700Z","comments":true,"path":"posts/157c05f5.html","link":"","permalink":"http://example.com/posts/157c05f5.html","excerpt":"","text":"查看数据库列表 show databases; 查看表列表 show tables; 创建库 create database 库名 创建表 create table 表名( id int(11) not null primary key auto_incremwnt, name varchar(32) not null, sex char(1) not null, birth DATE ) 忘记添加主键的话 alter table 表名 add primary key (字段); 忘记设自增 alter table 表名 modify column 字段 int auto_increment; 忘记设从哪里开始自增 alter table 表名 auto_increment = 数字; 单行插入数据 insert into 表名 (字段) VALUE (值) 多行插入数据 insert into 表名 (字段) VALUES (值),(值),(值) 使用存储过程批量插入 DELIMITER $$ drop procedure if exists pro_select; create procedure pro_select(IN v_id int) begin select * from 表 where id = v_id; end $$ DELIMITER ; 调用存储过程 call pro_select(v_id的值); 删掉存储过程 drop procedure pro_select;","categories":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"}],"tags":[{"name":"常用命令","slug":"常用命令","permalink":"http://example.com/tags/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"}],"author":"lzw"},{"title":"索引失效- like条件 左边有% 导致索引失效","slug":"索引失效-like条件-左边有-导致索引失效","date":"2022-03-07T16:30:00.000Z","updated":"2022-06-11T07:53:44.413Z","comments":true,"path":"posts/a7b038eb.html","link":"","permalink":"http://example.com/posts/a7b038eb.html","excerpt":"","text":"LIKE 语句不允许使用 % 开头，否则索引会失效； 当真的需要两边都使用%来模糊查询时，当这个作为模糊查询的条件字段（例子中的name）以及所想要查询出来的数据字段（例子中的 id &amp; name）都有索引列时，才能真正使用索引，否则，索引失效全表扫描（比如多了一个 salary 字段）","categories":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"}],"tags":[{"name":"索引","slug":"索引","permalink":"http://example.com/tags/%E7%B4%A2%E5%BC%95/"}],"author":"lzw"},{"title":"mysql生成百万数据","slug":"mysql生成百万数据","date":"2022-03-07T04:16:00.000Z","updated":"2022-06-11T07:53:44.413Z","comments":true,"path":"posts/e6bde92c.html","link":"","permalink":"http://example.com/posts/e6bde92c.html","excerpt":"","text":"mysql 如何快速生成百万测试数据实现思路 1、创建内存表和普通表 2、创建函数及存储过程 创建生成n个随机数字的函数创建生成号码函数创建随机字符串函数创建插入内存表数据的存储过程创建内存表数据插入普通表的存储过程3、调用存储过程插入数据 修改mysql内存表存储大小的值调用我写的另一个存储过程：add_test_user_memory_to_outside实现思路在我们平时工作或学习的过程中，有时需要在数据库中生成大量的测试数据，这个时候，我们可以利用mysql内存表插入速度快的特点，先利用函数和存储过程在内存表中生成数据，然后再从内存表插入普通表中。经过我的测试，这种方案插入数据是非常快的。 下面是实现步骤。 一、创建内存表和普通表#创建内存表 CREATE TABLE `test_user_memory` ( `id` int(11) NOT NULL AUTO_INCREMENT comment '主键id', `user_id` varchar(36) NOT NULL comment '用户id', `user_name` varchar(30) NOT NULL comment '用户名称', `phone` varchar(20) NOT NULL comment '手机号码', `lan_id` int(9) NOT NULL comment '本地网', `region_id` int(9) NOT NULL comment '区域', `create_time` datetime NOT NULL comment '创建时间', PRIMARY KEY (`id`), KEY `idx_user_id` (`user_id`) ) ENGINE=MEMORY DEFAULT CHARSET=utf8mb4; engine=memory是指这张表作为一张内存表.内存表的特点是读写快,但重启后会清空.并且对字段大小和类型有要求 #创建普通表 CREATE TABLE `test_user` ( `id` int(11) NOT NULL AUTO_INCREMENT comment '主键id', `user_id` varchar(36) NOT NULL comment '用户id', `user_name` varchar(30) NOT NULL comment '用户名称', `phone` varchar(20) NOT NULL comment '手机号码', `lan_id` int(9) NOT NULL comment '本地网', `region_id` int(9) NOT NULL comment '区域', `create_time` datetime NOT NULL comment '创建时间', PRIMARY KEY (`id`), KEY `idx_user_id` (`user_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; 2、创建函数及存储过程创建生成n个随机数字的函数生成手机号码的时候要用到 #生成n个随机数字 DELIMITER $$ CREATE FUNCTION randNum(n int) RETURNS VARCHAR(255) BEGIN DECLARE chars_str varchar(20) DEFAULT '0123456789'; DECLARE return_str varchar(255) DEFAULT ''; DECLARE i INT DEFAULT 0; WHILE i &lt; n DO SET return_str = concat(return_str,substring(chars_str , FLOOR(1 + RAND()*10 ),1)); SET i = i +1; END WHILE; RETURN return_str; END $$ DELIMITER; 创建生成号码函数 #生成随机手机号码 # 定义常用的手机头 130 131 132 133 134 135 136 137 138 139 186 187 189 151 157 #SET starts = 1+floor(rand()*15)*4; 截取字符串的开始是从 1、5、9、13 ...开始的。floor(rand()*15)的取值范围是0~14 #SET head = substring(bodys,starts,3);在字符串bodys中从starts位置截取三位 DELIMITER $$ CREATE FUNCTION generatePhone() RETURNS varchar(20) BEGIN DECLARE head char(3); DECLARE phone varchar(20); DECLARE bodys varchar(100) default \"130 131 132 133 134 135 136 137 138 139 186 187 189 151 157\"; DECLARE starts int; SET starts = 1+floor(rand()*15)*4; SET head = trim(substring(bodys,starts,3)); SET phone = trim(concat(head,randNum(8))); RETURN phone; END $$ DELIMITER ; 创建随机字符串函数 #创建随机字符串和随机时间的函数 DELIMITER $$ CREATE FUNCTION `randStr`(n INT) RETURNS varchar(255) CHARSET utf8mb4 DETERMINISTIC BEGIN DECLARE chars_str varchar(100) DEFAULT 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'; DECLARE return_str varchar(255) DEFAULT '' ; DECLARE i INT DEFAULT 0; WHILE i &lt; n DO SET return_str = concat(return_str, substring(chars_str, FLOOR(1 + RAND() * 62), 1)); SET i = i + 1; END WHILE; RETURN return_str; END$$ DELIMITER; 创建插入内存表数据的存储过程 # 创建插入内存表数据存储过程 入参n是多少就插入多少条数据 DELIMITER $$ CREATE PROCEDURE `add_test_user_memory`(IN n int) BEGIN DECLARE i INT DEFAULT 1; WHILE (i &lt;= n) DO INSERT INTO test_user_memory (user_id, user_name, phone, lan_id,region_id, create_time) VALUES (uuid(), randStr(20), generatePhone(), FLOOR(RAND() * 1000), FLOOR(RAND() * 100), NOW()); SET i = i + 1; END WHILE; END $$ DELIMITER ; 创建内存表数据插入普通表存储过程此处利用对内存表的循环插入和删除来实现批量生成数据，这样可以不需要更改mysql默认的max_heap_table_size值也照样可以生成百万或者千万的数据。max_heap_table_size默认值是16M。max_heap_table_size的作用是配置用户创建内存临时表的大小，配置的值越大，能存进内存表的数据就越多。 #循环从内存表获取数据插入普通表 #参数描述 n表示循环调用几次；count表示每次插入内存表和普通表的数据量 DELIMITER $$ CREATE PROCEDURE `add_test_user_memory_to_outside`(IN n int, IN count int) BEGIN DECLARE i INT DEFAULT 1; WHILE (i &lt;= n) DO CALL add_test_user_memory(count); INSERT INTO test_user SELECT * FROM test_user_memory; delete from test_user_memory; SET i = i + 1; END WHILE; END $$ DELIMITER ; 3、调用存储过程插入数据 #先调用存储过程往内存表插入一万条数据，然后再把内存表的一万条数据插入普通表 CALL add_test_user_memory(10000); #一次性把内存表的数据插入到普通表，这个过程是很快的 INSERT INTO test_user SELECT * FROM test_user_memory; #清空内存表数据 delete from test_user_memory; 先简单测试一下插入内存表一万条数据要花多少时间把内存表的一万条数据一次性插入普通表，只需要很短的时间就完成了，如下图所示查询刚刚插入的普通表的数据因为我没有更改数据库内存表内存大小，所以单次插入内存表一万条数据是没问题的，但是单次插入内存表十万条数据就不行了，会报内存表已满的异常。如下图所示 如果想调用一次存储过程插入普通表十万或百万的数据要如何实现呢？这里有两种方案 修改mysql内存表存储大小的值1、通过执行mysql命令修改 SET GLOBAL tmp_table_size=2147483648;SET GLOBAL max_heap_table_size=2147483648; 2、通过修改mysql配置文件 vi /etc/my.cnf[mysqld]max_heap_table_size = 2048Mtmp_table_size = 2048M 可以通过下面的方式查看内存表存储大小 二、调用另一个存储过程add_test_user_memory_to_outside 这个存储过程就是通过不断循环插入内存表，再从内存表获取数据插入普通表，最后删除内存表，以此循环直至循环结束。 #循环100次，每次生成10000条数据 总共生成一百万条数据 CALL add_test_user_memory_to_outside(100,10000); 一百万数据 三、创建存储过程中遇见问题[Err] 1418 - This function has none of DETERMINISTIC, NO SQL, or READS SQL DATA in its declaration and binary logging is enabled (you *might* want to use the less safe log_bin_trust_function_creators variable) 解决方法1.在mysql数据库中执行以下语句 （临时生效，重启后失效） set global log_bin_trust_function_creators=TRUE; 或者 set global log_bin_trust_function_creators=1; 在配置文件/etc/my.cnf的[mysqld]或者my-default.ini文件中配置log_bin_trust_function_creators=1 3.创建时添加红色的文字部分","categories":[{"name":"百万数据","slug":"百万数据","permalink":"http://example.com/categories/%E7%99%BE%E4%B8%87%E6%95%B0%E6%8D%AE/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"}],"author":"lzw"},{"title":"索引","slug":"索引","date":"2022-03-06T10:50:00.000Z","updated":"2022-06-06T11:25:29.703Z","comments":true,"path":"posts/df9a61f7.html","link":"","permalink":"http://example.com/posts/df9a61f7.html","excerpt":"","text":"//查看是否开启慢查询日志 mysql&gt; show variables like '%slow%'; //临时开启慢查询日志 mysql&gt; set global slow_query_log=ON; //查看是否开启慢查询日志 mysql&gt; show variables like '%slow%'; //查询超过多少时间就可以记录，上面是如果超过10秒就要记录 mysql&gt; show variables like '%long%'; //改成一秒，如果超过一秒就写到慢日志里面去(一般一秒是最好的) mysql&gt; set long_query_time=1; //查看日记存储方式，默认FILE mysql&gt; show variables like '%log_output%'; // 慢查询日志文件所在位置 mysql&gt; show variables like '%datadir%'; //响应时间是3秒，超过了原先设定的一秒 mysql&gt; select sleep(3); 创建数据库 create table employee( id int not null auto_increment primary key, name varchar(30) comment '姓名', sex varchar(1) comment '性别', salary int comment '薪资（元）', dept varchar(30) comment '部门' ); insert into employee(name, sex, salary, dept) values('张三', '男', 5500, '部门A'); insert into employee(name, sex, salary, dept) values('李洁', '女', 4500, '部门C'); insert into employee(name, sex, salary, dept) values('李小梅', '女', 4200, '部门A'); insert into employee(name, sex, salary, dept) values('欧阳辉', '男', 7500, '部门C'); insert into employee(name, sex, salary, dept) values('李芳', '女', 8500, '部门A'); insert into employee(name, sex, salary, dept) values('张江', '男', 6800, '部门A'); insert into employee(name, sex, salary, dept) values('李四', '男', 12000, '部门B'); insert into employee(name, sex, salary, dept) values('王五', '男', 3500, '部门B'); insert into employee(name, sex, salary, dept) values('马小龙', '男', 6000, '部门A'); insert into employee(name, sex, salary, dept) values('龙五', '男', 8000, '部门B'); insert into employee(name, sex, salary, dept) values('冯小芳', '女', 10000, '部门C'); insert into employee(name, sex, salary, dept) values('马小花', '女', 4000, '部门B'); insert into employee(name, sex, salary, dept) values('柳峰', '男', 8800, '部门A'); 查询表的默认索引 mysql&gt; show index from employee\\G; //主键会默认建一个id索引 //查询分析 mysql&gt; explain select * from employee where name='柳峰'; //创建普通索引 mysql&gt; create index idx_name on employee(name); //查的时候可以看到一个主键索引 mysql&gt; show index from employee\\G; 创建索引 create index idx_name_salary_dept on employee(name,salary,dept); //查询分析 explain select * from employee where name ='柳峰'\\G; 验证有name就能索引 // name和salary mysql&gt; explain select * from employee where name ='柳峰' and salary=8800\\G; //name和dept mysql&gt; explain select * from employee where name ='柳峰' and dept='部门A'\\G; 覆盖索引查看表的索引情况 show index from employee; mysql&gt; explain select id from employee employee where id=11\\G; mysql&gt; explain select id from employee\\G; //查name,salary mysql&gt; explain select name,salary from employee; //查name,salary,dept mysql&gt; explain select name,salary,dept from employee; //因为没有sxe条件，所以只能做全部扫描type为null mysql&gt; explain select name,sex,salary,dept from employee; 总结： 首先开启慢查询日志 再设置sql超过多少时间会被写到日志中 使用explain(查询分析器)进行sql优化 比较重要的字段有: select_type : 查询类型，有简单查询、联合查询、子查询等 key : 使用的索引 rows : 扫描的行数 使用索引 索引： 索引底层的数据结构是B+树的结构， 什么是树 子节点有多个前驱的都不是树","categories":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"}],"tags":[{"name":"索引","slug":"索引","permalink":"http://example.com/tags/%E7%B4%A2%E5%BC%95/"}],"author":"lzw"},{"title":"mysql8.0时区","slug":"mysql8-0时区","date":"2022-02-26T13:14:00.000Z","updated":"2022-06-06T11:25:29.677Z","comments":true,"path":"posts/29a1f0ab.html","link":"","permalink":"http://example.com/posts/29a1f0ab.html","excerpt":"","text":"?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true","categories":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"author":"lzw"},{"title":"使用Typora+PicGo配置Gitee图床","slug":"使用Typora-PicGo配置Gitee图床","date":"2022-02-26T12:31:00.000Z","updated":"2022-06-11T11:11:18.196Z","comments":true,"path":"posts/35b4fd03.html","link":"","permalink":"http://example.com/posts/35b4fd03.html","excerpt":"","text":"Typora+PicGo配置Gitee图床 https://blog.csdn.net/weixin_41033105/article/details/108502494?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=typora","categories":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://example.com/tags/%E5%B7%A5%E5%85%B7/"}],"author":"lzw"},{"title":"idea文件修改父目录高亮","slug":"idea文件修改父目录高亮","date":"2022-02-26T12:12:00.000Z","updated":"2022-06-11T07:53:44.413Z","comments":true,"path":"posts/a9d943e2.html","link":"","permalink":"http://example.com/posts/a9d943e2.html","excerpt":"","text":"","categories":[{"name":"idea的使用","slug":"idea的使用","permalink":"http://example.com/categories/idea%E7%9A%84%E4%BD%BF%E7%94%A8/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://example.com/tags/%E5%B7%A5%E5%85%B7/"}],"author":"lzw"},{"title":"分布式ID","slug":"分布式ID","date":"2022-02-23T13:03:00.000Z","updated":"2022-06-06T11:25:29.695Z","comments":true,"path":"posts/90055678.html","link":"","permalink":"http://example.com/posts/90055678.html","excerpt":"","text":"传统单体架构：（它的ID一般都设置为主键自增，AUTO_INCREMENT=1设置自增起始值） 但是在分布式服务架构（会有多个数据库或者多个表存储相同的业务数据） 在这种情况下，数据库的自增ID就会出现产生相同ID，破坏了主键的唯一性 解决思路 一：从数据库上解决：我们可以在不同的库上的表中设置不同的起始值和步长 但是要考虑数据库的可用性和服务的容错性 二：使用算法生成的ID代替主键，比如生成的ID要根据时间戳和机器的ID和序列数等等条件去生成唯一的ID，但是要考虑到时间回拨的问题，还要做缓冲的设计提高性能。 从数据库方面 方案一： 数据库生成ID给每张相同业务的表的主键字段 设置不同的auto_increment_increment（起始值）和auto_increment_offset（步长）来保证ID自增 避免出现主键冲突的问题 方案二： redis 使用INCR (Redis Incr 命令将 key 中储存的数字值增一) 和INCRBY (Redis Incrby 命令将 key 中储存的数字加上指定的增量值。) 使用算法生成的ID UUID 优点：无网络消耗，方便 缺点：不容易存储，位数太多，其它应用场景少 信息不安全（会暴露Mac地址） 对索引不利 Snowflake（雪花算法）","categories":[{"name":"学习","slug":"学习","permalink":"http://example.com/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"分布式","slug":"分布式","permalink":"http://example.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"}],"author":"lzw"}],"categories":[{"name":"工作常用","slug":"工作常用","permalink":"http://example.com/categories/%E5%B7%A5%E4%BD%9C%E5%B8%B8%E7%94%A8/"},{"name":"运维","slug":"运维","permalink":"http://example.com/categories/%E8%BF%90%E7%BB%B4/"},{"name":"大数据","slug":"大数据","permalink":"http://example.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"},{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"},{"name":"项目","slug":"项目","permalink":"http://example.com/categories/%E9%A1%B9%E7%9B%AE/"},{"name":"百万数据","slug":"百万数据","permalink":"http://example.com/categories/%E7%99%BE%E4%B8%87%E6%95%B0%E6%8D%AE/"},{"name":"笔记","slug":"笔记","permalink":"http://example.com/categories/%E7%AC%94%E8%AE%B0/"},{"name":"idea的使用","slug":"idea的使用","permalink":"http://example.com/categories/idea%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"name":"学习","slug":"学习","permalink":"http://example.com/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"流程图","slug":"流程图","permalink":"http://example.com/tags/%E6%B5%81%E7%A8%8B%E5%9B%BE/"},{"name":"数据维护","slug":"数据维护","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%B4%E6%8A%A4/"},{"name":"命令、分支、地址","slug":"命令、分支、地址","permalink":"http://example.com/tags/%E5%91%BD%E4%BB%A4%E3%80%81%E5%88%86%E6%94%AF%E3%80%81%E5%9C%B0%E5%9D%80/"},{"name":"python、hive","slug":"python、hive","permalink":"http://example.com/tags/python%E3%80%81hive/"},{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"},{"name":"blog","slug":"blog","permalink":"http://example.com/tags/blog/"},{"name":"springboot集成mybatis","slug":"springboot集成mybatis","permalink":"http://example.com/tags/springboot%E9%9B%86%E6%88%90mybatis/"},{"name":"常用命令","slug":"常用命令","permalink":"http://example.com/tags/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"name":"索引","slug":"索引","permalink":"http://example.com/tags/%E7%B4%A2%E5%BC%95/"},{"name":"数据库","slug":"数据库","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"工具","slug":"工具","permalink":"http://example.com/tags/%E5%B7%A5%E5%85%B7/"},{"name":"分布式","slug":"分布式","permalink":"http://example.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"}]}