{"meta":{"title":"lzw","subtitle":"lzwの博客","description":"大专 | 软件技术 ","author":"lzw","url":"http://example.com","root":"/"},"pages":[{"title":"404","date":"2019-08-10T08:41:10.000Z","updated":"2022-01-24T18:27:03.087Z","comments":true,"path":"404.html","permalink":"http://example.com/404.html","excerpt":"","text":""},{"title":"","date":"2022-04-19T01:01:29.871Z","updated":"2022-01-24T18:27:03.163Z","comments":true,"path":"baidu_verify_xxxxxxx.html","permalink":"http://example.com/baidu_verify_xxxxxxx.html","excerpt":"","text":"wvlc3L96QK"},{"title":"","date":"2022-04-19T01:01:29.885Z","updated":"2022-01-24T18:27:03.164Z","comments":true,"path":"google1xxxxxxx0.html","permalink":"http://example.com/google1xxxxxxx0.html","excerpt":"","text":"google-site-verification: google110e5e5e14c8dcf0.html"},{"title":"放松一下","date":"2019-08-10T08:41:10.000Z","updated":"2022-01-24T18:27:03.094Z","comments":true,"path":"List/index.html","permalink":"http://example.com/List/index.html","excerpt":"","text":"影音资源共享"},{"title":"about","date":"2019-10-24T16:00:00.000Z","updated":"2022-01-24T18:27:03.163Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""},{"title":"archives","date":"2019-10-24T16:00:00.000Z","updated":"2022-01-24T18:27:03.163Z","comments":true,"path":"archives/index.html","permalink":"http://example.com/archives/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-10-24T16:00:00.000Z","updated":"2022-01-24T18:27:03.163Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"留言板","date":"2022-02-22T16:00:00.000Z","updated":"2022-02-23T14:49:31.586Z","comments":true,"path":"contact/index.html","permalink":"http://example.com/contact/index.html","excerpt":"","text":"畅所欲言 在这里可以留下你的足迹，欢迎在下方留言，欢迎交换友链，一起交流学习！"},{"title":"统计","date":"2020-10-31T02:11:28.000Z","updated":"2022-01-24T18:27:03.164Z","comments":true,"path":"census/index.html","permalink":"http://example.com/census/index.html","excerpt":"","text":""},{"title":"友链","date":"2019-07-19T08:42:10.000Z","updated":"2022-01-24T18:27:03.164Z","comments":true,"path":"friends/index.html","permalink":"http://example.com/friends/index.html","excerpt":"","text":""},{"title":"资源分享","date":"2019-07-19T08:40:27.000Z","updated":"2022-01-24T18:27:03.164Z","comments":true,"path":"resource/index.html","permalink":"http://example.com/resource/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-07-19T08:40:27.000Z","updated":"2022-01-24T18:27:03.165Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"相册","date":"2022-04-19T01:01:29.904Z","updated":"2022-01-24T18:27:03.091Z","comments":true,"path":"List/galleries/index.html","permalink":"http://example.com/List/galleries/index.html","excerpt":"","text":""},{"title":"听听音乐","date":"2019-07-19T08:40:27.000Z","updated":"2022-01-24T18:27:03.096Z","comments":true,"path":"List/tools/index.html","permalink":"http://example.com/List/tools/index.html","excerpt":"","text":""},{"title":"视频","date":"2019-08-10T08:41:10.000Z","updated":"2022-01-24T18:27:03.095Z","comments":true,"path":"List/movies/index.html","permalink":"http://example.com/List/movies/index.html","excerpt":"","text":""},{"title":"听听音乐","date":"2019-07-19T08:40:27.000Z","updated":"2022-01-24T18:27:03.095Z","comments":true,"path":"List/music/index.html","permalink":"http://example.com/List/music/index.html","excerpt":"","text":""},{"title":"二次元风","date":"2022-04-19T01:01:29.906Z","updated":"2022-01-24T18:27:03.091Z","comments":true,"path":"List/galleries/二次元风/index.html","permalink":"http://example.com/List/galleries/%E4%BA%8C%E6%AC%A1%E5%85%83%E9%A3%8E/index.html","excerpt":"","text":""},{"title":"动漫人物","date":"2022-04-19T01:01:29.907Z","updated":"2022-01-24T18:27:03.091Z","comments":true,"path":"List/galleries/动漫人物/index.html","permalink":"http://example.com/List/galleries/%E5%8A%A8%E6%BC%AB%E4%BA%BA%E7%89%A9/index.html","excerpt":"","text":""},{"title":"动漫插画","date":"2022-04-19T01:01:29.908Z","updated":"2022-01-24T18:27:03.092Z","comments":true,"path":"List/galleries/动漫插画/index.html","permalink":"http://example.com/List/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/index.html","excerpt":"","text":""},{"title":"动漫风景","date":"2022-04-19T01:01:29.912Z","updated":"2022-01-24T18:27:03.092Z","comments":true,"path":"List/galleries/动漫风景/index.html","permalink":"http://example.com/List/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/index.html","excerpt":"","text":""},{"title":"呆萌猫咪","date":"2022-04-19T01:01:29.913Z","updated":"2022-01-24T18:27:03.092Z","comments":true,"path":"List/galleries/呆萌猫咪/index.html","permalink":"http://example.com/List/galleries/%E5%91%86%E8%90%8C%E7%8C%AB%E5%92%AA/index.html","excerpt":"","text":""},{"title":"城市风光","date":"2022-04-19T01:01:29.914Z","updated":"2022-01-24T18:27:03.093Z","comments":true,"path":"List/galleries/城市风光/index.html","permalink":"http://example.com/List/galleries/%E5%9F%8E%E5%B8%82%E9%A3%8E%E5%85%89/index.html","excerpt":"","text":""},{"title":"清新花卉","date":"2022-04-19T01:01:29.915Z","updated":"2022-01-24T18:27:03.093Z","comments":true,"path":"List/galleries/清新花卉/index.html","permalink":"http://example.com/List/galleries/%E6%B8%85%E6%96%B0%E8%8A%B1%E5%8D%89/index.html","excerpt":"","text":""},{"title":"乖巧小狗","date":"2022-04-19T01:01:29.905Z","updated":"2022-01-24T18:27:03.091Z","comments":true,"path":"List/galleries/乖巧小狗/index.html","permalink":"http://example.com/List/galleries/%E4%B9%96%E5%B7%A7%E5%B0%8F%E7%8B%97/index.html","excerpt":"","text":""},{"title":"炫酷跑车","date":"2022-04-19T01:01:29.916Z","updated":"2022-01-24T18:27:03.093Z","comments":true,"path":"List/galleries/炫酷跑车/index.html","permalink":"http://example.com/List/galleries/%E7%82%AB%E9%85%B7%E8%B7%91%E8%BD%A6/index.html","excerpt":"","text":""},{"title":"璀璨星空","date":"2022-04-19T01:01:29.917Z","updated":"2022-01-24T18:27:03.094Z","comments":true,"path":"List/galleries/璀璨星空/index.html","permalink":"http://example.com/List/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/index.html","excerpt":"","text":""},{"title":"甜美食品","date":"2022-04-19T01:01:29.919Z","updated":"2022-01-24T18:27:03.094Z","comments":true,"path":"List/galleries/甜美食品/index.html","permalink":"http://example.com/List/galleries/%E7%94%9C%E7%BE%8E%E9%A3%9F%E5%93%81/index.html","excerpt":"","text":""},{"title":"自然风景","date":"2022-04-19T01:01:29.920Z","updated":"2022-01-24T18:27:03.094Z","comments":true,"path":"List/galleries/自然风景/index.html","permalink":"http://example.com/List/galleries/%E8%87%AA%E7%84%B6%E9%A3%8E%E6%99%AF/index.html","excerpt":"","text":""}],"posts":[{"title":"常用的东西","slug":"常用的东西","date":"2022-05-18T13:25:00.000Z","updated":"2022-05-24T02:25:22.654Z","comments":true,"path":"posts/8a82d9b.html","link":"","permalink":"http://example.com/posts/8a82d9b.html","excerpt":"","text":"分支前缀 bugfix- feature- 查异常 url.full : *material-transfer* and http.request.method : POST 查看hive建表语句：show create table tablename; 查看hive表结构：describe tablename; 简写：desc tablename; 删除hive表 drop table if exists bbksale_origin.t_children; 查看hive表字段 %sql desc formatted 查看所有表 %sql use bbksale_origin; show tables; 修改hive字段数据类型 Alter table 表名 change column 原字段名称 现字段名称 数据类型 新增字段表 alter table 表名 add columns(字段名 数据类型) 本地swagger默认地址 http://localhost:8080/swagger-ui.html","categories":[{"name":"工作常用","slug":"工作常用","permalink":"http://example.com/categories/%E5%B7%A5%E4%BD%9C%E5%B8%B8%E7%94%A8/"}],"tags":[{"name":"命令、分支、地址","slug":"命令、分支、地址","permalink":"http://example.com/tags/%E5%91%BD%E4%BB%A4%E3%80%81%E5%88%86%E6%94%AF%E3%80%81%E5%9C%B0%E5%9D%80/"}],"author":"lzw"},{"title":"mysql建表语句转hive语句(py)","slug":"mysql建表语句转hive语句-py","date":"2022-05-18T12:22:00.000Z","updated":"2022-05-19T00:35:35.637Z","comments":true,"path":"posts/11524e14.html","link":"","permalink":"http://example.com/posts/11524e14.html","excerpt":"","text":"from re import fullmatch from pymysql import Connection # conda install -y pymysql 查询MySQL表的列名、列类型和列注释 SQL_COLUMNS = ''' SELECT `COLUMN_NAME` -- 列名 ,`COLUMN_TYPE` -- 类型 ,`COLUMN_COMMENT` -- 列注释 FROM `information_schema`.`COLUMNS` WHERE `TABLE_SCHEMA`='{TABLE_SCHEMA}' AND `TABLE_NAME`='{TABLE_NAME}' ORDER BY `ORDINAL_POSITION`; '''.strip().format 查询MySQL表的注释 SQL_COMMENT = ''' SELECT `TABLE_COMMENT` FROM `information_schema`.`TABLES` WHERE `TABLE_SCHEMA`='{TABLE_SCHEMA}' AND `TABLE_NAME`='{TABLE_NAME}'; '''.strip().format HIVE建表语句 HIVE_DDL = ''' CREATE EXTERNAL TABLE `{table}`( {columns} ) COMMENT '{table_comment}' PARTITIONED BY (`ymd` STRING COMMENT '年月日'); '''.strip().format MySQL原表的建表语句，用于参照 MYSQL_DDL = \"SHOW CREATE TABLE `{TABLE_SCHEMA}`.`{TABLE_NAME}`\".format def column_type_mysql2hive(mysql_column_type): \"\"\"MySQL列数据类型转成HIVE的\"\"\" # tinyint if fullmatch('^tinyint.+unsigned', mysql_column_type): return 'SMALLINT' elif fullmatch('^tinyint.*', mysql_column_type): return 'TINYINT' # smallint elif fullmatch('^smallint.+unsigned', mysql_column_type): return 'INT' elif fullmatch('^smallint.*', mysql_column_type): return 'SMALLINT' # mediumint elif fullmatch('^mediumint.*', mysql_column_type): return 'INT' # int elif fullmatch('^int.+unsigned', mysql_column_type): return 'BIGINT' elif fullmatch('^int.*', mysql_column_type): return 'INT' # bigint elif fullmatch('^bigint.+unsigned', mysql_column_type): # return 'STRING' return 'BIGINT' # 无符号BIGINT可能会越界 elif fullmatch('^bigint.*', mysql_column_type): return 'BIGINT' # double、float、decimal elif fullmatch('^double.*', mysql_column_type): return 'DOUBLE' elif fullmatch('^float.*', mysql_column_type): return 'FLOAT' elif fullmatch(r'^decimal.*', mysql_column_type): return mysql_column_type.replace(' unsigned', '').upper() # 其它 else: return 'STRING' class Mysql: def __init__(self, **kwargs): self.db = Connection( user=kwargs.pop('user', 'root'), password=kwargs.pop('password','gdmysql!'), host=kwargs.pop('host', '172.28.2.15'), database=kwargs.pop('database','service_center'), port=kwargs.pop('port', 3306), charset=kwargs.pop('charset', 'UTF8'), ) self.cursor = self.db.cursor() def __del__(self): self.cursor.close() self.db.close() def commit(self, sql): try: self.cursor.execute(sql) self.db.commit() except Exception as e: print(e) def fetchall(self, query): self.cursor.execute(query) return self.cursor.fetchall() # 有数据：tuple of tuple；无数据：() def get_columns(self, db, tb): columns = [] for c_name, c_type, c_comment in self.fetchall(SQL_COLUMNS(TABLE_SCHEMA=db, TABLE_NAME=tb)): hive_type = column_type_mysql2hive(c_type) columns.append(f\" `{c_name}` {hive_type} COMMENT '{c_comment}',\") return '\\n'.join(columns).rstrip(',') def get_table_comment(self, db, tb): return self.fetchall(SQL_COMMENT(TABLE_SCHEMA=db, TABLE_NAME=tb))[0][0] def get_hive_ddl(self, db, tb, prefix='ods_mysql_', postfix='_full'): columns = self.get_columns(db, tb) comment = self.get_table_comment(db, tb) table = prefix + tb + postfix return HIVE_DDL(table=table, columns=columns, table_comment=comment) def get_mysql_ddl(self, db, tb): return self.fetchall(MYSQL_DDL(TABLE_SCHEMA=db, TABLE_NAME=tb))[0][1] if __name__ == '__main__': TABLE_SCHEMA = 'service_center' TABLE_NAME = 't_factory_repair' m = Mysql(password='gdmysql!', database='service_center') print('源MySQL建表语句'.center(99, '-')) print(m.get_mysql_ddl(TABLE_SCHEMA, TABLE_NAME)) print('HIVE建表语句'.center(99, '-')) print(m.get_hive_ddl(TABLE_SCHEMA, TABLE_NAME))","categories":[{"name":"大数据","slug":"大数据","permalink":"http://example.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"}],"tags":[{"name":"python、hive","slug":"python、hive","permalink":"http://example.com/tags/python%E3%80%81hive/"}],"author":"lzw"},{"title":"mysql唯一索引遇见的bug","slug":"mysql唯一索引遇见的bug","date":"2022-04-29T10:01:00.000Z","updated":"2022-04-29T10:04:29.891Z","comments":true,"path":"posts/1df01bfc.html","link":"","permalink":"http://example.com/posts/1df01bfc.html","excerpt":"","text":"https://blog.csdn.net/gaifuxi9518/article/details/120010828?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165122516716781667883091%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=165122516716781667883091&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-120010828.142^v9^control,157^v4^control&amp;utm_term=java.sql.SQLIntegrityConstraintViolationException%3A+Duplicate+entry+AF99E02210600235+for+key+idx_ticket_code&amp;spm=1018.2226.3001.4187","categories":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"}],"author":"lzw"},{"title":"移动blog报错","slug":"移动blog报错","date":"2022-04-19T01:13:00.000Z","updated":"2022-04-19T01:21:02.034Z","comments":true,"path":"posts/6f7442ca.html","link":"","permalink":"http://example.com/posts/6f7442ca.html","excerpt":"","text":"完美解决 bash: hexo: command not found解决思路首先检查node和npm的版本信息 node -v npm -v 环境变量的配置问题 注意你的博客目录下应该有两个 node_modules 文件夹，例如我的是 E:\\BLOG\\www.itrhx.com\\node_modules\\.bin 和 E:\\BLOG\\www.itrhx.com\\Hexo\\node_modules\\.bin 要添加到 Path 里面的是与 _config.yml 在同一个目录的 node_modules 文件夹！ 环境变量添加好了之后重新打开 git 即可运行 hexo 命令，如果此时仍然无法执行 hexo 命令，那就只能拿出终极绝招了，运行命令 npm install hexo-cli -g 重新安装 hexo 即可！","categories":[],"tags":[{"name":"blog","slug":"blog","permalink":"http://example.com/tags/blog/"}],"author":"lzw"},{"title":"springboot集成mybatis","slug":"springboot集成mybatis","date":"2022-04-02T11:25:00.000Z","updated":"2022-04-02T11:45:06.593Z","comments":true,"path":"posts/1597783f.html","link":"","permalink":"http://example.com/posts/1597783f.html","excerpt":"","text":"springboot集成mybatis项目目录https://gitee.com/thunder-noon-lll/drawing-bed/raw/master/img/image-20220402192629325.png 配置文件pom.xml文件&lt;!--mybatis依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.4.6&lt;/version&gt; &lt;/dependency&gt; &lt;!--mysql连接依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;8.0.18&lt;/version&gt; &lt;/dependency&gt; &lt;!--lombok依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;version&gt;1.18.12&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;!--alibaba连接池--&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.2.1&lt;/version&gt; &lt;/dependency&gt; &lt;!--mybatis与springboot的连接依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.1.1&lt;/version&gt; &lt;/dependency&gt; application.properties# 应用名称 spring.application.name=demo # 应用服务 WEB 访问端口 server.port=8888 #druid数据库连接池 type=com.alibaba.druid.pool.DruidDataSource #配置mapper mybatis.mapper-locations=classpath:mapper/*.xml application.ymlspring: datasource: url: jdbc:mysql://localhost:3306/百万索引?serverTimezone=GMT%2B8&amp;useSSL=true driver-class-name: com.mysql.cj.jdbc.Driver username: root password: lzw123654789 # 彩色日志开启 output: ansi: enabled: always # sql日志开启 logging: level: com.lzw.mybatis.demo.mapper: debug mapper.xml&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt; &lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt; &lt;mapper namespace=\"com.lzw.mybatis.demo.mapper.TestUserMapper\"&gt; &lt;select id=\"queryAll\" resultType=\"com.lzw.mybatis.demo.pojo.TestUser\"&gt; select * from test_user limit 1,1 &lt;/select&gt; &lt;/mapper&gt; TestUserMapperpackage com.lzw.mybatis.demo.mapper; import com.lzw.mybatis.demo.pojo.TestUser; import org.apache.ibatis.annotations.Mapper; import java.util.List; @Mapper public interface TestUserMapper { //查询所有数据 public List&lt;TestUser&gt; queryAll(); } TestUserpackage com.lzw.mybatis.demo.pojo; import lombok.Data; import java.sql.Date; @Data public class TestUser { private Long id; private String userId; private String userName; private String phone; private Long lanId; private Long regionId; private Date createTime; } 单元测试@SpringBootTest class DemoApplicationTests { @Test void contextLoads() { } @Autowired TestUserMapper testUserMapper; @Test public void toTest(){ List&lt;TestUser&gt; testUsers = testUserMapper.queryAll(); testUsers.forEach(e-&gt; System.out.println(e)); } } https://gitee.com/thunder-noon-lll/drawing-bed/raw/master/img/image-20220402193142363.png","categories":[{"name":"项目","slug":"项目","permalink":"http://example.com/categories/%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"springboot集成mybatis","slug":"springboot集成mybatis","permalink":"http://example.com/tags/springboot%E9%9B%86%E6%88%90mybatis/"}],"author":"lzw"},{"title":"数据库常用命令","slug":"数据库常用命令","date":"2022-03-28T12:57:00.000Z","updated":"2022-04-01T14:49:03.420Z","comments":true,"path":"posts/157c05f5.html","link":"","permalink":"http://example.com/posts/157c05f5.html","excerpt":"","text":"查看数据库列表 show databases; 查看表列表 show tables; 创建库 create database 库名 创建表 create table 表名( id int(11) not null primary key auto_incremwnt, name varchar(32) not null, sex char(1) not null, birth DATE ) 忘记添加主键的话 alter table 表名 add primary key (字段); 忘记设自增 alter table 表名 modify column 字段 int auto_increment; 忘记设从哪里开始自增 alter table 表名 auto_increment = 数字; 单行插入数据 insert into 表名 (字段) VALUE (值) 多行插入数据 insert into 表名 (字段) VALUES (值),(值),(值) 使用存储过程批量插入 DELIMITER $$ drop procedure if exists pro_select; create procedure pro_select(IN v_id int) begin select * from 表 where id = v_id; end $$ DELIMITER ; 调用存储过程 call pro_select(v_id的值); 删掉存储过程 drop procedure pro_select;","categories":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"}],"tags":[{"name":"常用命令","slug":"常用命令","permalink":"http://example.com/tags/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"}],"author":"lzw"},{"title":"索引失效- like条件 左边有% 导致索引失效","slug":"索引失效-like条件-左边有-导致索引失效","date":"2022-03-07T16:30:00.000Z","updated":"2022-03-07T16:40:19.214Z","comments":true,"path":"posts/a7b038eb.html","link":"","permalink":"http://example.com/posts/a7b038eb.html","excerpt":"","text":"LIKE 语句不允许使用 % 开头，否则索引会失效； 当真的需要两边都使用%来模糊查询时，当这个作为模糊查询的条件字段（例子中的name）以及所想要查询出来的数据字段（例子中的 id &amp; name）都有索引列时，才能真正使用索引，否则，索引失效全表扫描（比如多了一个 salary 字段）","categories":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"}],"tags":[{"name":"索引","slug":"索引","permalink":"http://example.com/tags/%E7%B4%A2%E5%BC%95/"}],"author":"lzw"},{"title":"mysql生成百万数据","slug":"mysql生成百万数据","date":"2022-03-07T04:16:00.000Z","updated":"2022-03-07T12:59:06.522Z","comments":true,"path":"posts/e6bde92c.html","link":"","permalink":"http://example.com/posts/e6bde92c.html","excerpt":"","text":"mysql 如何快速生成百万测试数据实现思路 1、创建内存表和普通表 2、创建函数及存储过程 创建生成n个随机数字的函数创建生成号码函数创建随机字符串函数创建插入内存表数据的存储过程创建内存表数据插入普通表的存储过程3、调用存储过程插入数据 修改mysql内存表存储大小的值调用我写的另一个存储过程：add_test_user_memory_to_outside实现思路在我们平时工作或学习的过程中，有时需要在数据库中生成大量的测试数据，这个时候，我们可以利用mysql内存表插入速度快的特点，先利用函数和存储过程在内存表中生成数据，然后再从内存表插入普通表中。经过我的测试，这种方案插入数据是非常快的。 下面是实现步骤。 一、创建内存表和普通表#创建内存表 CREATE TABLE `test_user_memory` ( `id` int(11) NOT NULL AUTO_INCREMENT comment '主键id', `user_id` varchar(36) NOT NULL comment '用户id', `user_name` varchar(30) NOT NULL comment '用户名称', `phone` varchar(20) NOT NULL comment '手机号码', `lan_id` int(9) NOT NULL comment '本地网', `region_id` int(9) NOT NULL comment '区域', `create_time` datetime NOT NULL comment '创建时间', PRIMARY KEY (`id`), KEY `idx_user_id` (`user_id`) ) ENGINE=MEMORY DEFAULT CHARSET=utf8mb4; engine=memory是指这张表作为一张内存表.内存表的特点是读写快,但重启后会清空.并且对字段大小和类型有要求 #创建普通表 CREATE TABLE `test_user` ( `id` int(11) NOT NULL AUTO_INCREMENT comment '主键id', `user_id` varchar(36) NOT NULL comment '用户id', `user_name` varchar(30) NOT NULL comment '用户名称', `phone` varchar(20) NOT NULL comment '手机号码', `lan_id` int(9) NOT NULL comment '本地网', `region_id` int(9) NOT NULL comment '区域', `create_time` datetime NOT NULL comment '创建时间', PRIMARY KEY (`id`), KEY `idx_user_id` (`user_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; 2、创建函数及存储过程创建生成n个随机数字的函数生成手机号码的时候要用到 #生成n个随机数字 DELIMITER $$ CREATE FUNCTION randNum(n int) RETURNS VARCHAR(255) BEGIN DECLARE chars_str varchar(20) DEFAULT '0123456789'; DECLARE return_str varchar(255) DEFAULT ''; DECLARE i INT DEFAULT 0; WHILE i &lt; n DO SET return_str = concat(return_str,substring(chars_str , FLOOR(1 + RAND()*10 ),1)); SET i = i +1; END WHILE; RETURN return_str; END $$ DELIMITER; 创建生成号码函数 #生成随机手机号码 # 定义常用的手机头 130 131 132 133 134 135 136 137 138 139 186 187 189 151 157 #SET starts = 1+floor(rand()*15)*4; 截取字符串的开始是从 1、5、9、13 ...开始的。floor(rand()*15)的取值范围是0~14 #SET head = substring(bodys,starts,3);在字符串bodys中从starts位置截取三位 DELIMITER $$ CREATE FUNCTION generatePhone() RETURNS varchar(20) BEGIN DECLARE head char(3); DECLARE phone varchar(20); DECLARE bodys varchar(100) default \"130 131 132 133 134 135 136 137 138 139 186 187 189 151 157\"; DECLARE starts int; SET starts = 1+floor(rand()*15)*4; SET head = trim(substring(bodys,starts,3)); SET phone = trim(concat(head,randNum(8))); RETURN phone; END $$ DELIMITER ; 创建随机字符串函数 #创建随机字符串和随机时间的函数 DELIMITER $$ CREATE FUNCTION `randStr`(n INT) RETURNS varchar(255) CHARSET utf8mb4 DETERMINISTIC BEGIN DECLARE chars_str varchar(100) DEFAULT 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'; DECLARE return_str varchar(255) DEFAULT '' ; DECLARE i INT DEFAULT 0; WHILE i &lt; n DO SET return_str = concat(return_str, substring(chars_str, FLOOR(1 + RAND() * 62), 1)); SET i = i + 1; END WHILE; RETURN return_str; END$$ DELIMITER; 创建插入内存表数据的存储过程 # 创建插入内存表数据存储过程 入参n是多少就插入多少条数据 DELIMITER $$ CREATE PROCEDURE `add_test_user_memory`(IN n int) BEGIN DECLARE i INT DEFAULT 1; WHILE (i &lt;= n) DO INSERT INTO test_user_memory (user_id, user_name, phone, lan_id,region_id, create_time) VALUES (uuid(), randStr(20), generatePhone(), FLOOR(RAND() * 1000), FLOOR(RAND() * 100), NOW()); SET i = i + 1; END WHILE; END $$ DELIMITER ; 创建内存表数据插入普通表存储过程此处利用对内存表的循环插入和删除来实现批量生成数据，这样可以不需要更改mysql默认的max_heap_table_size值也照样可以生成百万或者千万的数据。max_heap_table_size默认值是16M。max_heap_table_size的作用是配置用户创建内存临时表的大小，配置的值越大，能存进内存表的数据就越多。 #循环从内存表获取数据插入普通表 #参数描述 n表示循环调用几次；count表示每次插入内存表和普通表的数据量 DELIMITER $$ CREATE PROCEDURE `add_test_user_memory_to_outside`(IN n int, IN count int) BEGIN DECLARE i INT DEFAULT 1; WHILE (i &lt;= n) DO CALL add_test_user_memory(count); INSERT INTO test_user SELECT * FROM test_user_memory; delete from test_user_memory; SET i = i + 1; END WHILE; END $$ DELIMITER ; 3、调用存储过程插入数据 #先调用存储过程往内存表插入一万条数据，然后再把内存表的一万条数据插入普通表 CALL add_test_user_memory(10000); #一次性把内存表的数据插入到普通表，这个过程是很快的 INSERT INTO test_user SELECT * FROM test_user_memory; #清空内存表数据 delete from test_user_memory; 先简单测试一下插入内存表一万条数据要花多少时间把内存表的一万条数据一次性插入普通表，只需要很短的时间就完成了，如下图所示查询刚刚插入的普通表的数据因为我没有更改数据库内存表内存大小，所以单次插入内存表一万条数据是没问题的，但是单次插入内存表十万条数据就不行了，会报内存表已满的异常。如下图所示 如果想调用一次存储过程插入普通表十万或百万的数据要如何实现呢？这里有两种方案 修改mysql内存表存储大小的值1、通过执行mysql命令修改 SET GLOBAL tmp_table_size=2147483648;SET GLOBAL max_heap_table_size=2147483648; 2、通过修改mysql配置文件 vi /etc/my.cnf[mysqld]max_heap_table_size = 2048Mtmp_table_size = 2048M 可以通过下面的方式查看内存表存储大小 二、调用另一个存储过程add_test_user_memory_to_outside 这个存储过程就是通过不断循环插入内存表，再从内存表获取数据插入普通表，最后删除内存表，以此循环直至循环结束。 #循环100次，每次生成10000条数据 总共生成一百万条数据 CALL add_test_user_memory_to_outside(100,10000); 一百万数据 三、创建存储过程中遇见问题[Err] 1418 - This function has none of DETERMINISTIC, NO SQL, or READS SQL DATA in its declaration and binary logging is enabled (you *might* want to use the less safe log_bin_trust_function_creators variable) 解决方法1.在mysql数据库中执行以下语句 （临时生效，重启后失效） set global log_bin_trust_function_creators=TRUE; 或者 set global log_bin_trust_function_creators=1; 在配置文件/etc/my.cnf的[mysqld]或者my-default.ini文件中配置log_bin_trust_function_creators=1 3.创建时添加红色的文字部分","categories":[{"name":"百万数据","slug":"百万数据","permalink":"http://example.com/categories/%E7%99%BE%E4%B8%87%E6%95%B0%E6%8D%AE/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"}],"author":"lzw"},{"title":"索引","slug":"索引","date":"2022-03-06T10:50:00.000Z","updated":"2022-03-06T10:52:11.138Z","comments":true,"path":"posts/df9a61f7.html","link":"","permalink":"http://example.com/posts/df9a61f7.html","excerpt":"","text":"//查看是否开启慢查询日志 mysql&gt; show variables like '%slow%'; //临时开启慢查询日志 mysql&gt; set global slow_query_log=ON; //查看是否开启慢查询日志 mysql&gt; show variables like '%slow%'; //查询超过多少时间就可以记录，上面是如果超过10秒就要记录 mysql&gt; show variables like '%long%'; //改成一秒，如果超过一秒就写到慢日志里面去(一般一秒是最好的) mysql&gt; set long_query_time=1; //查看日记存储方式，默认FILE mysql&gt; show variables like '%log_output%'; // 慢查询日志文件所在位置 mysql&gt; show variables like '%datadir%'; //响应时间是3秒，超过了原先设定的一秒 mysql&gt; select sleep(3); 创建数据库 create table employee( id int not null auto_increment primary key, name varchar(30) comment '姓名', sex varchar(1) comment '性别', salary int comment '薪资（元）', dept varchar(30) comment '部门' ); insert into employee(name, sex, salary, dept) values('张三', '男', 5500, '部门A'); insert into employee(name, sex, salary, dept) values('李洁', '女', 4500, '部门C'); insert into employee(name, sex, salary, dept) values('李小梅', '女', 4200, '部门A'); insert into employee(name, sex, salary, dept) values('欧阳辉', '男', 7500, '部门C'); insert into employee(name, sex, salary, dept) values('李芳', '女', 8500, '部门A'); insert into employee(name, sex, salary, dept) values('张江', '男', 6800, '部门A'); insert into employee(name, sex, salary, dept) values('李四', '男', 12000, '部门B'); insert into employee(name, sex, salary, dept) values('王五', '男', 3500, '部门B'); insert into employee(name, sex, salary, dept) values('马小龙', '男', 6000, '部门A'); insert into employee(name, sex, salary, dept) values('龙五', '男', 8000, '部门B'); insert into employee(name, sex, salary, dept) values('冯小芳', '女', 10000, '部门C'); insert into employee(name, sex, salary, dept) values('马小花', '女', 4000, '部门B'); insert into employee(name, sex, salary, dept) values('柳峰', '男', 8800, '部门A'); 查询表的默认索引 mysql&gt; show index from employee\\G; //主键会默认建一个id索引 //查询分析 mysql&gt; explain select * from employee where name='柳峰'; //创建普通索引 mysql&gt; create index idx_name on employee(name); //查的时候可以看到一个主键索引 mysql&gt; show index from employee\\G; 创建索引 create index idx_name_salary_dept on employee(name,salary,dept); //查询分析 explain select * from employee where name ='柳峰'\\G; 验证有name就能索引 // name和salary mysql&gt; explain select * from employee where name ='柳峰' and salary=8800\\G; //name和dept mysql&gt; explain select * from employee where name ='柳峰' and dept='部门A'\\G; 覆盖索引查看表的索引情况 show index from employee; mysql&gt; explain select id from employee employee where id=11\\G; mysql&gt; explain select id from employee\\G; //查name,salary mysql&gt; explain select name,salary from employee; //查name,salary,dept mysql&gt; explain select name,salary,dept from employee; //因为没有sxe条件，所以只能做全部扫描type为null mysql&gt; explain select name,sex,salary,dept from employee; 总结： 首先开启慢查询日志 再设置sql超过多少时间会被写到日志中 使用explain(查询分析器)进行sql优化 比较重要的字段有: select_type : 查询类型，有简单查询、联合查询、子查询等 key : 使用的索引 rows : 扫描的行数 使用索引 索引： 索引底层的数据结构是B+树的结构， 什么是树 子节点有多个前驱的都不是树","categories":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"}],"tags":[{"name":"索引","slug":"索引","permalink":"http://example.com/tags/%E7%B4%A2%E5%BC%95/"}],"author":"lzw"},{"title":"mysql8.0时区","slug":"mysql8-0时区","date":"2022-02-26T13:14:00.000Z","updated":"2022-02-26T13:15:58.159Z","comments":true,"path":"posts/29a1f0ab.html","link":"","permalink":"http://example.com/posts/29a1f0ab.html","excerpt":"","text":"?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true","categories":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"author":"lzw"},{"title":"使用Typora+PicGo配置Gitee图床","slug":"使用Typora-PicGo配置Gitee图床","date":"2022-02-26T12:31:00.000Z","updated":"2022-02-26T12:46:38.705Z","comments":true,"path":"posts/35b4fd03.html","link":"","permalink":"http://example.com/posts/35b4fd03.html","excerpt":"","text":"Typora+PicGo配置Gitee图床 [(22条消息) 使用Typora+PicGo配置Gitee图床_清菡的博客-CSDN博客](https://blog.csdn.net/weixin_41033105/article/details/108502494?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=typora picgo gitee&amp;utm_medium=distribute.pc_search_result.none-task-blog-2allsobaiduweb~default-3-108502494.pc_search_result_positive&amp;spm=1018.2226.3001.4187)","categories":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://example.com/tags/%E5%B7%A5%E5%85%B7/"}],"author":"lzw"},{"title":"idea文件修改父目录高亮","slug":"idea文件修改父目录高亮","date":"2022-02-26T12:12:00.000Z","updated":"2022-02-26T12:25:10.063Z","comments":true,"path":"posts/a9d943e2.html","link":"","permalink":"http://example.com/posts/a9d943e2.html","excerpt":"","text":"","categories":[{"name":"idea的使用","slug":"idea的使用","permalink":"http://example.com/categories/idea%E7%9A%84%E4%BD%BF%E7%94%A8/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://example.com/tags/%E5%B7%A5%E5%85%B7/"}],"author":"lzw"},{"title":"分布式ID","slug":"分布式ID","date":"2022-02-23T13:03:00.000Z","updated":"2022-02-26T12:11:16.081Z","comments":true,"path":"posts/90055678.html","link":"","permalink":"http://example.com/posts/90055678.html","excerpt":"","text":"传统单体架构：（它的ID一般都设置为主键自增，AUTO_INCREMENT=1设置自增起始值） 但是在分布式服务架构（会有多个数据库或者多个表存储相同的业务数据） 在这种情况下，数据库的自增ID就会出现产生相同ID，破坏了主键的唯一性 解决思路 一：从数据库上解决：我们可以在不同的库上的表中设置不同的起始值和步长 但是要考虑数据库的可用性和服务的容错性 二：使用算法生成的ID代替主键，比如生成的ID要根据时间戳和机器的ID和序列数等等条件去生成唯一的ID，但是要考虑到时间回拨的问题，还要做缓冲的设计提高性能。 从数据库方面 方案一： 数据库生成ID给每张相同业务的表的主键字段 设置不同的auto_increment_increment（起始值）和auto_increment_offset（步长）来保证ID自增 避免出现主键冲突的问题 方案二： redis 使用INCR (Redis Incr 命令将 key 中储存的数字值增一) 和INCRBY (Redis Incrby 命令将 key 中储存的数字加上指定的增量值。) 使用算法生成的ID UUID 优点：无网络消耗，方便 缺点：不容易存储，位数太多，其它应用场景少 信息不安全（会暴露Mac地址） 对索引不利 Snowflake（雪花算法）","categories":[{"name":"学习","slug":"学习","permalink":"http://example.com/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"分布式","slug":"分布式","permalink":"http://example.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"}],"author":"lzw"}],"categories":[{"name":"工作常用","slug":"工作常用","permalink":"http://example.com/categories/%E5%B7%A5%E4%BD%9C%E5%B8%B8%E7%94%A8/"},{"name":"大数据","slug":"大数据","permalink":"http://example.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"},{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"},{"name":"项目","slug":"项目","permalink":"http://example.com/categories/%E9%A1%B9%E7%9B%AE/"},{"name":"百万数据","slug":"百万数据","permalink":"http://example.com/categories/%E7%99%BE%E4%B8%87%E6%95%B0%E6%8D%AE/"},{"name":"笔记","slug":"笔记","permalink":"http://example.com/categories/%E7%AC%94%E8%AE%B0/"},{"name":"idea的使用","slug":"idea的使用","permalink":"http://example.com/categories/idea%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"name":"学习","slug":"学习","permalink":"http://example.com/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"命令、分支、地址","slug":"命令、分支、地址","permalink":"http://example.com/tags/%E5%91%BD%E4%BB%A4%E3%80%81%E5%88%86%E6%94%AF%E3%80%81%E5%9C%B0%E5%9D%80/"},{"name":"python、hive","slug":"python、hive","permalink":"http://example.com/tags/python%E3%80%81hive/"},{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"},{"name":"blog","slug":"blog","permalink":"http://example.com/tags/blog/"},{"name":"springboot集成mybatis","slug":"springboot集成mybatis","permalink":"http://example.com/tags/springboot%E9%9B%86%E6%88%90mybatis/"},{"name":"常用命令","slug":"常用命令","permalink":"http://example.com/tags/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"name":"索引","slug":"索引","permalink":"http://example.com/tags/%E7%B4%A2%E5%BC%95/"},{"name":"数据库","slug":"数据库","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"工具","slug":"工具","permalink":"http://example.com/tags/%E5%B7%A5%E5%85%B7/"},{"name":"分布式","slug":"分布式","permalink":"http://example.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"}]}